# Contributor: Rasmus Thomsen <oss@cogitri.dev>
# Contributor: Jakub Jirutka <jakub@jirutka.cz>
# Contributor: Shiz <hi@shiz.me>
# Contributor: Jeizsm <jeizsm@gmail.com>
# Maintainer: Rasmus Thomsen <oss@cogitri.dev>
pkgname=rust
pkgver=1.36.0
_llvmver=8
_bootver=1.35.0
pkgrel=0
pkgdesc="The Rust Programming Language"
url="https://www.rust-lang.org"
arch="x86_64 armv7 armhf"
license="Apache-2.0 AND MIT"

# gcc is needed at runtime just for linking. Someday rustc might invoke
# the linker directly, and then we'll only need binutils.
# See: https://github.com/rust-lang/rust/issues/11937
depends="$pkgname-stdlib=$pkgver-r$pkgrel gcc llvm-libunwind-dev musl-dev"

# * Rust is self-hosted, so you need rustc (and cargo) to build rustc...
#   The last revision of this abuild that does not depend on itself (uses
#   prebuilt rustc and cargo) is 8cb3112594f10a8cee5b5412c28a846acb63167f.
makedepends="
	cmake
	curl-dev
	file
	libgit2-dev
	openssl-dev
	llvm$_llvmver-dev
	llvm$_llvmver-test-utils
	python3
	tar
	zlib-dev
	coreutils
	rust-bootstrap=>$_bootver
	cargo-bootstrap
"

# XXX: This is a hack to allow this abuild to depend on itself. Adding "rust"
# to makedepends would not work, because abuild implicitly removes $pkgname
# and $subpackages from the abuild's dependencies.
provides="rust-bootstrap=$pkgver-r$pkgrel"
# This is needed for -src that contains some testing binaries.
# Disable tests for now, while we use foreign triplets
options="!archcheck !check"
subpackages="
	$pkgname-dbg
	$pkgname-stdlib
	$pkgname-analysis
	$pkgname-gdb::noarch
	$pkgname-lldb::noarch
	$pkgname-doc
	$pkgname-src::noarch
	cargo
	cargo-bash-completions:_cargo_bashcomp:noarch
	cargo-zsh-completion:_cargo_zshcomp:noarch
	cargo-doc:_cargo_doc:noarch
	"
source="https://static.rust-lang.org/dist/rustc-$pkgver-src.tar.gz
	https://exp.exqa.de/alpine-rust/rust-aarch64-$_bootver.tar.xz
	alpine-target.patch
	0002-Fix-LLVM-build.patch
	0003-Allow-rustdoc-to-work-when-cross-compiling-on-musl.patch
	0004-Require-static-native-libraries-when-linking-static-.patch
	0005-Remove-nostdlib-and-musl_root-from-musl-targets.patch
	0006-Prefer-libgcc_eh-over-libunwind-for-musl.patch
	0007-runtest-Fix-proc-macro-tests-on-musl-hosts.patch
	0008-test-use-extern-for-plugins-Don-t-assume-multilib.patch
	0009-test-sysroot-crates-are-unstable-Fix-test-when-rpath.patch
	0010-Ignore-broken-and-non-applicable-tests.patch
	0011-Link-stage-2-tools-dynamically-to-libstd.patch
	0012-Move-debugger-scripts-to-usr-share-rust.patch
	0030-libc-linkage.patch
	0031-typenum-pmmx.patch

	"
builddir="$srcdir/rustc-$pkgver-src"

# We have to add new arches in multiple steps:
# 1. Compile with the upstream triplets, compiling alpine's triplets in
# 2. Compile again, now with our triplets selected as build/target, now that
#    rustc knows about them
case "$CARCH" in
	armv7)
		_build="armv7-unknown-linux-musleabihf"
		_target="$_build"
		;;
	armhf)
		_build="arm-unknown-linux-musleabihf"
		_target="$_build"
		;;
	ppc64le)
		_build="powerpc64le-unknown-linux-musl"
		_target="$_build"
		;;
	aarch64)
		#export LD_LIBRARY_PATH="$srcdir/rust-aarch64/usr/lib"
		#export PATH="$srcdir/rust-aarch64/usr/bin:$PATH"
		_build="aarch64-unknown-linux-musl"
		_target="$_build"
		;;
	*)
		_build="$CBUILD"
		_target="$CTARGET"
esac

_rlibdir="usr/lib/rustlib/$_target/lib"
_sharedir="usr/share/rust"

ldpath="/$_rlibdir"

export RUST_BACKTRACE=1
# Convince libgit2-sys to use the distro libgit2.
export LIBGIT2_SYS_USE_PKG_CONFIG=1
export LLVM_LINK_SHARED=1

# rust checksums files in vendor/, but we have to patch a few files...
_clear_vendor_checksums() {
		sed -i 's/\("files":{\)[^}]*/\1/' vendor/$1/.cargo-checksum.json
}

prepare() {
	default_prepare

	_clear_vendor_checksums libc
}

build() {
	# Fails to compile libbacktrace-sys otherwise
	case "$CARCH" in
		x86)
			export CFLAGS="$CFLAGS -fno-stack-protector"
			;;
	esac

	# See config.toml.example in Rust's src for explanations what each config option does
	cat > config.toml <<- EOF
		[build]
		build = "$_build"
		host = [ "$_target" ]
		target = [ "$_target" ]
		cargo = "/usr/bin/cargo"
		rustc = "/usr/bin/rustc"
		submodules = false
		python = "python3"
		locked-deps = true
		vendor = true
		extended = true
		tools = [ "analysis", "cargo", "clippy", "rls", "rustfmt", "src" ]
		[install]
		prefix = "/usr"
		[rust]
		codegen-units = 1
		debuginfo = true
		debuginfo-lines = true
		debuginfo-only-std = true
		debuginfo-tools = true
		backtrace = true
		channel = "stable"
		rpath = false
		jemalloc = false
		[target.$_target]
		cc = "$_target-gcc"
		cxx = "$_target-g++"
		linker = "$_target-gcc"
		llvm-config = "/usr/lib/llvm$_llvmver/bin/llvm-config"
		crt-static = false
	EOF


	python3 ./x.py build --jobs ${JOBS:-2}
}

check() {
	# At this moment lib/rustlib/$CTARGET/lib does not contain a complete
	# copy of the .so libs from lib (they will be copied there during
	# 'x.py install'). Thus we must set LD_LIBRARY_PATH for tests to work.
	# This is related to change-rpath-to-rustlib.patch.
	export LD_LIBRARY_PATH="$builddir/build/$CTARGET/stage2/lib"

	"$srcdir"/check-rustc "$builddir"/build/$CTARGET/stage2/bin/rustc

# XXX: There's some problem with these tests, we will figure it out later.
#	make check \
#		LD_LIBRARY_PATH="$_stage0dir/lib" \
#		VERBOSE=1

	msg "Running tests for cargo..."
	CFG_DISABLE_CROSS_TESTS=1 ./x.py test --no-fail-fast src/tools/cargo

	unset LD_LIBRARY_PATH
}

package() {
	DESTDIR="$pkgdir" ./x.py install -v

	# Shared objects should have executable flag.
	chmod +x "$pkgdir"/$_rlibdir/*.so
}

stdlib() {
	pkgdesc="Standard library for Rust (static rlibs)"

	_mv "$pkgdir"/$_rlibdir/*.rlib "$subpkgdir"/$_rlibdir/
}

analysis() {
	pkgdesc="Compiler analysis data for the Rust standard library"
	depends="$pkgname-stdlib=$pkgver-r$pkgrel"

	_mv "$pkgdir"/$_rlibdir/../analysis "$subpkgdir"/${_rlibdir%/*}/
}

gdb() {
	pkgdesc="GDB pretty printers for Rust"
	depends="$pkgname gdb"

	mkdir -p "$subpkgdir"
	cd "$subpkgdir"

	_mv "$pkgdir"/usr/bin/rust-gdb usr/bin/
	_mv "$pkgdir"/$_sharedir/etc/gdb_*.py $_sharedir/etc/
}

lldb() {
	pkgdesc="LLDB pretty printers for Rust"
	depends="$pkgname lldb py2-lldb"

	mkdir -p "$subpkgdir"
	cd "$subpkgdir"

	_mv "$pkgdir"/usr/bin/rust-lldb usr/bin/
	_mv "$pkgdir"/$_sharedir/etc/lldb_*.py $_sharedir/etc/
}

src() {
	pkgdesc="$pkgdesc (source code)"
	depends="$pkgname"
	license="$license OFL-1.1 GPL-3.0-or-later GPL-3.0-with-GCC-exception CC-BY-SA-3.0 LGPL-3.0"

	_mv "$pkgdir"/usr/lib/rustlib/src/rust "$subpkgdir"/usr/src/
	rmdir -p "$pkgdir"/usr/lib/rustlib/src 2>/dev/null || true

	mkdir -p "$subpkgdir"/usr/lib/rustlib/src
	ln -s ../../../src/rust "$subpkgdir"/usr/lib/rustlib/src/rust
}

cargo() {
	pkgdesc="The Rust package manager"
	license="Apache-2.0 MIT UNLICENSE"
	depends="$pkgname"
	# XXX: See comment on top-level provides=.
	provides="cargo-bootstrap=$pkgver-r$pkgrel"

	_mv "$pkgdir"/usr/bin/cargo "$subpkgdir"/usr/bin/
}

_cargo_bashcomp() {
	pkgdesc="Bash completions for cargo"
	license="Apache-2.0 MIT"
	depends=""
	install_if="cargo=$pkgver-r$pkgrel bash-completion"

	cd "$pkgdir"
	_mv etc/bash_completion.d/cargo \
		"$subpkgdir"/usr/share/bash-completion/completions/
	rmdir -p etc/bash_completion.d 2>/dev/null || true
}

_cargo_zshcomp() {
	pkgdesc="ZSH completions for cargo"
	license="Apache-2.0 MIT"
	depends=""
	install_if="cargo=$pkgver-r$pkgrel zsh"

	cd "$pkgdir"
	_mv usr/share/zsh/site-functions/_cargo \
		"$subpkgdir"/usr/share/zsh/site-functions/_cargo
	rmdir -p usr/share/zsh/site-functions 2>/dev/null || true
}

_cargo_doc() {
	pkgdesc="The Rust package manager (documentation)"
	license="Apache-2.0 MIT"
	install_if="docs cargo=$pkgver-r$pkgrel"

	# XXX: This is hackish!
	cd "$pkgdir"/../$pkgname-doc
	_mv usr/share/man/man1/cargo* "$subpkgdir"/usr/share/man/man1/
}

_mv() {
	local dest; for dest; do true; done  # get last argument
	mkdir -p "$dest"
	mv "$@"
}

sha512sums="f0bd470a98d2b044c2af40d0c19838c3f7410c4acea5b2f8b5bcf0ca8294917986e7e5aed7d00ea5520e8b03d7130f993e75125576c693ba571feae0d0b961e9  rustc-1.36.0-src.tar.gz
e22bccc770715aaf2a42ea2a09ef24df4f7939f2bdd529538a570db817dcd43e8f7e2ac45412970f1e2aed754d84043a950357e5045172ac64f3aca1c1e86f98  rust-aarch64-1.35.0.tar.xz
d95feacad5cf6e9550e1dce94278c8adcb196d2203e5223e67e8766207f392d6511160719e53910c56c8c9cc01f320c8bae51df70de61d15e9252ec00ab16ecc  alpine-target.patch
c35e3a1f7199050ef6d69deee2273c601c4d9734e4fe08a29765a7e251965ed4e62b0c534b33f1381aa3cc4f0bc5377e46a6ac442c0eb9d10b540af5bf191fdf  0002-Fix-LLVM-build.patch
01ae8adc9032db8f4d525e1dbc9ae53404fbe3739be8ac8a2aa25eb5384667264b9edd948c075bb9d12cf5357bf448c79375a8ef828dd6c4bd372eef9d71ed01  0003-Allow-rustdoc-to-work-when-cross-compiling-on-musl.patch
24b2a7064d8f73dddf0892e345f2b415647e74c7ab892a0e5d73212b8940a274c74d315d2f32d744cc8aa3acf885725ddf77e1171d480ea234653000a2b58a52  0004-Require-static-native-libraries-when-linking-static-.patch
c851836236bf6d4125477737cb012a42a56a13c0e1419f15f3be07c9d6d2c8dd419338f29d439924820f2c535d48ed851c953501891f81081ca73ad21d367148  0005-Remove-nostdlib-and-musl_root-from-musl-targets.patch
80257e64ffd71cfe22e10787ae402e285688752a19908b0191a6bbfe02153d58c9ae682e516854ee533242eea5f65cb980ba88776e27648afb41e1d62ea497e2  0006-Prefer-libgcc_eh-over-libunwind-for-musl.patch
c91649e495efc8e4193d90595d35b76e64baf6d3efb4c8043c2ff300602e093fa8a4be3a7bf0485e6473954a19e26a1d28acdc0e86b86060e98e066e7e6bbca8  0007-runtest-Fix-proc-macro-tests-on-musl-hosts.patch
d2efebb638a08c9b0a336888010219085b8c09bf380cdc5a2ce05c35085487a8931f916c2cd5d12b9f543cf74ff0cdb0dedff9f626876580d1af6e16256e047d  0008-test-use-extern-for-plugins-Don-t-assume-multilib.patch
1fc9f30cf1af56c7b0af4bf75161e739aa0fd454f08c26d39b9b6e3e4695b55d91de617620eb30593e4cdde8b289135f61c9069031854963cf786a9c9a4ca024  0009-test-sysroot-crates-are-unstable-Fix-test-when-rpath.patch
e71f6d829a9252dc7cc77f2c4586ca7bc739e42da788dbd9ca238b3da4b87ee3e06b73a6ad062f6f430fc25663148a29e9a609a43db5d44ce963e4f9a238fd5a  0010-Ignore-broken-and-non-applicable-tests.patch
78d99a50ab7b0eb5328491420f0286e7e4b0656a72ef31106403e545905403ebd672c78030ee85818e027e2bedf6f8e86907cea5383b4a784cee548d1950d06d  0011-Link-stage-2-tools-dynamically-to-libstd.patch
84da219717195807ed9475c3f44192077aabd47fa41f19b4526589f9c000c736a96bb41870df29c0140404c6cec47d01b007537631c7d649577b0bd034bc9193  0012-Move-debugger-scripts-to-usr-share-rust.patch
8211bb6ed70d430f0c855b0b17074e9c6ccdd5d60c12db2b7551f08b5ed08d40c84fe7f25f6c1e530658031527ca9282298865cdc2929ff4f7e0f4eca8099246  0030-libc-linkage.patch
96baa2de54377bb5aef5b82083b377086cf7d9a581f77347e7d464295542b204a7be23ff5510aae6c298490521660d3ab64eb6ba22824156c95a685407a37f88  0031-typenum-pmmx.patch"
